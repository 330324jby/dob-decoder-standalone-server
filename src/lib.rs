pub mod decoder;
pub mod types;

#[cfg(feature = "embeded_vm")]
mod vm;

#[cfg(test)]
mod test {
    use ckb_types::h256;

    use crate::decoder::DOBDecoder;
    use crate::types::{
        ClusterDescriptionField, DOBClusterFormat, DOBDecoderFormat, DecoderLocationType, Settings,
        SporeContentField,
    };

    fn prepare_settings() -> Settings {
        Settings {
            ckb_rpc: "https://testnet.ckbapp.dev/".to_string(),
            protocol_version: "dob/0".to_string(),
            ckb_vm_runner: "ckb-vm-runner".to_string(),
            decoders_cache_directory: "decoders".parse().unwrap(),
            ..Default::default()
        }
    }

    #[test]
    fn test_decode_unicorn_dna() {
        let settings = prepare_settings();
        let decoder = DOBDecoder::new(settings);

        let unicorn_content = SporeContentField {
            block_number: 0,
            cell_id: 0,
            dna: "44f24502b672369f94808892".to_string(),
        };
        let unicorn_metadata = ClusterDescriptionField {
            description: Default::default(),
            dob: DOBClusterFormat {
                decoder: DOBDecoderFormat {
                    location: DecoderLocationType::CodeHash,
                    hash: h256!(
                        "0xedbb2d19515ebbf69be66b2178b0c4c0884fdb33878bd04a5ad68736a6af74f8"
                    ),
                },
                pattern: "0a04000028000000990000000b01000098010000090200005c020000d302000091030000cc030000710000000c0000001400000004000000686f726e5d00000008000000550000000c0000000d000000010000000044000000180000002000000027000000330000003b00000004000000426c75650300000052656408000000436f6c6f7266756c04000000476f6c64050000005768697465720000000c000000150000000500000077696e67735d00000008000000550000000c0000000d000000010000000044000000180000002000000027000000330000003b00000004000000426c75650300000052656408000000436f6c6f7266756c04000000476f6c640500000057686974658d0000000c0000001400000004000000626f64797900000008000000710000000c0000000d000000010000000060000000180000002500000031000000430000005100000009000000426c756520576f6f640800000052656420466972650e000000436f6c6f7266756c2045617274680a000000476f6c64204d6574616c0b0000005768697465205761746572710000000c00000014000000040000007461696c5d00000008000000550000000c0000000d000000010000000044000000180000002000000027000000330000003b00000004000000426c75650300000052656408000000436f6c6f7266756c04000000476f6c64050000005768697465530000000c0000001400000004000000686169723f00000008000000370000000c0000000d0000000100000000260000000c0000001a0000000a00000059616e672d53686f72740800000059696e2d4c6f6e67770000000c0000001a0000000a000000686f72736573686f65735d00000008000000550000000c0000000d000000010000000044000000180000002000000027000000330000003b00000004000000426c75650300000052656408000000436f6c6f7266756c04000000476f6c64050000005768697465be0000000c000000160000000600000074616c656e74a800000008000000a00000000c0000000d00000001000000008f0000002c00000037000000400000004b000000540000005d00000067000000700000007a00000085000000070000005265766976616c0500000044656174680700000050726f706865740500000043757273650500000043726f776e060000004865726d69740500000047756172640600000041747461636b0700000043616c6c696e6706000000466f726765743b0000000c000000120000000200000068702900000008000000210000000c0000000d000000040300000050c3000000000000a0860100000000003e0000000c00000015000000050000006c75636b792900000008000000210000000c0000000d000000010300000001000000000000003100000000000000".to_string(),
                dna_bytes: 12,
            },
        };
        let render_result = decoder
            .decode_dna(&unicorn_content, unicorn_metadata)
            .expect("decode");
        let expected_render_result = "[{\"name\":\"horn\",\"traits\":[{\"String\":\"Gold\"}]},{\"name\":\"wings\",\"traits\":[{\"String\":\"Colorful\"}]},{\"name\":\"body\",\"traits\":[{\"String\":\"White Water\"}]},{\"name\":\"tail\",\"traits\":[{\"String\":\"Colorful\"}]},{\"name\":\"hair\",\"traits\":[{\"String\":\"Yang-Short\"}]},{\"name\":\"horseshoes\",\"traits\":[{\"String\":\"White\"}]},{\"name\":\"talent\",\"traits\":[{\"String\":\"Crown\"}]},{\"name\":\"hp\",\"traits\":[{\"Number\":59576}]},{\"name\":\"lucky\",\"traits\":[{\"Number\":3}]}]";
        assert_eq!(render_result, expected_render_result);
    }
}
